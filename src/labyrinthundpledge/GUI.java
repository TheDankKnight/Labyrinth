/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package labyrinthundpledge;

import java.awt.Graphics;
import java.awt.Color;
import java.util.ArrayList;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.awt.BasicStroke;
/**
 *
 * @author Ich
 */
public class GUI extends javax.swing.JFrame {
    int width=8, height=8;
    int panelW, panelH, absPanelW, absPanelH, drawOffX, drawOffY;
    int mauerW, mauerH;
    Color bgColor, wallColor = new Color(0,0,0), delColor = new Color(255,0,0);
    Kruskal gen = new Kruskal();
    Mauer[] borderN = gen.borderN, borderE = gen.borderE, borderS = gen.borderS, borderW=gen.borderW;
    Kasten[][] kasten = gen.getKasten();
    ArrayList<Mauer> borderMauern = gen.borderMauern, festeMauern = gen.festeMauern;
    BufferedImage backBuffer;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        absPanelW = drawingPanel.getWidth();
        absPanelH = drawingPanel.getHeight();
        bgColor = drawingPanel.getBackground();
        recalcProportions();
        btOKActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        options = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tfWidth = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfHeight = new javax.swing.JTextField();
        generierenOptions = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btResetField = new javax.swing.JButton();
        btRunGenerator = new javax.swing.JButton();
        btStepGenerator = new javax.swing.JButton();
        btOK = new javax.swing.JButton();
        drawingPanel = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        options.setBackground(new java.awt.Color(210, 210, 210));

        jLabel2.setText("Breite: ");

        tfWidth.setText("8");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("HÃ¶he: ");

        tfHeight.setText("8");

        generierenOptions.setBackground(new java.awt.Color(210, 210, 210));
        generierenOptions.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(73, 105, 121));
        jLabel4.setText("Generieren:");

        btResetField.setText("Reset");
        btResetField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResetFieldActionPerformed(evt);
            }
        });

        btRunGenerator.setText("Run");
        btRunGenerator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRunGeneratorActionPerformed(evt);
            }
        });

        btStepGenerator.setText("Step");
        btStepGenerator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStepGeneratorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generierenOptionsLayout = new javax.swing.GroupLayout(generierenOptions);
        generierenOptions.setLayout(generierenOptionsLayout);
        generierenOptionsLayout.setHorizontalGroup(
            generierenOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generierenOptionsLayout.createSequentialGroup()
                .addGroup(generierenOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generierenOptionsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(generierenOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btStepGenerator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btRunGenerator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btResetField, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        generierenOptionsLayout.setVerticalGroup(
            generierenOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generierenOptionsLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btResetField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRunGenerator)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btStepGenerator))
        );

        btOK.setText("OK");
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(generierenOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(optionsLayout.createSequentialGroup()
                        .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                            .addComponent(tfWidth)))))
        );
        optionsLayout.setVerticalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generierenOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        drawingPanel.setBackground(new java.awt.Color(255, 255, 255));
        drawingPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                drawingPanelComponentResized(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void deleteMauer(Mauer m){
        Graphics g = drawingPanel.getGraphics();
        g.setColor(delColor);
        if(m.getOrientation()==Mauer.richtungen.horizontal){
            g.drawLine(drawOffX+m.xpos*mauerW, drawOffY+m.ypos*mauerH, drawOffX+(m.xpos+1)*mauerW, drawOffY+m.ypos*mauerH);
        } else {
            g.drawLine(drawOffX+m.xpos*mauerW, drawOffY+m.ypos*mauerH, drawOffX+m.xpos*mauerW, drawOffY+(m.ypos+1)*mauerH);
        }
        redraw();
    }
    
    private void btRunGeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunGeneratorActionPerformed
        while(!gen.finished()){
            deleteMauer(gen.step());
        }
    }//GEN-LAST:event_btRunGeneratorActionPerformed

    private void btStepGeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStepGeneratorActionPerformed
        if(!gen.finished())
            deleteMauer(gen.step());
        redraw();
    }//GEN-LAST:event_btStepGeneratorActionPerformed

    private void btOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOKActionPerformed
        width = Integer.parseInt(tfWidth.getText());
        height = Integer.parseInt(tfHeight.getText());
        recalcProportions();
        btResetFieldActionPerformed(null);
    }//GEN-LAST:event_btOKActionPerformed

    private void drawingPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_drawingPanelComponentResized
        absPanelW = drawingPanel.getWidth();
        absPanelH = drawingPanel.getHeight();  
        recalcProportions();
        redraw();
    }//GEN-LAST:event_drawingPanelComponentResized

    private void btResetFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResetFieldActionPerformed
        gen.cleanup();
        gen = new Kruskal(width, height);
        borderMauern = gen.borderMauern;
        festeMauern = gen.festeMauern;
        borderN = gen.borderN;
        borderE = gen.borderE;
        borderS = gen.borderS;
        borderW=gen.borderW;
        kasten = gen.getKasten();
        redraw();
    }//GEN-LAST:event_btResetFieldActionPerformed
    
    private void recalcProportions(){
        backBuffer = new BufferedImage(absPanelW, absPanelH, BufferedImage.TYPE_INT_RGB);
        if(absPanelW/width > absPanelH/height){ // Breitbild: x-Abstand
            int temp = (absPanelH*width/height); // VerhÃ¤ltniss von width und height beibehalen
            panelW = temp;
            panelH = absPanelH;
            drawOffX = (absPanelW-temp)/2;
            drawOffY = 0;
        } else { // Hochkant: <-Abstand
            int temp = (absPanelW*height/width); // VerhÃ¤ltniss von width und height beibehalen
            panelW = absPanelW;
            panelH = temp;
            drawOffX = 0;
            drawOffY = (absPanelH-temp)/2;
        }
        mauerW = panelW/width;
        mauerH = panelH/height;
    }
    
    private void redraw(){
        // Init      
        Graphics2D g = backBuffer.createGraphics();
        g.setColor(bgColor);
        g.fillRect(0, 0, absPanelW, absPanelH);
        
        // Regionen
        for(int x=0; x<width; ++x){
            for(int y=0; y<height; ++y){
                g.setColor(kasten[x][y].feld.color);
                g.fillRect(drawOffX+kasten[x][y].x*mauerW, drawOffY+kasten[x][y].y*mauerH, mauerW, mauerH);
            }
        }
        
        // WÃ¤nde
        g.setColor(wallColor);
        int size = borderMauern.size();
        Mauer cur;
        for(int i=0; i<size; ++i){
            cur = borderMauern.get(i);
            if(cur.getOrientation()==Mauer.richtungen.horizontal){
                g.drawLine(drawOffX+cur.xpos*mauerW, drawOffY+cur.ypos*mauerH, drawOffX+(cur.xpos+1)*mauerW, drawOffY+cur.ypos*mauerH);
            } else {
                g.drawLine(drawOffX+cur.xpos*mauerW, drawOffY+cur.ypos*mauerH, drawOffX+cur.xpos*mauerW, drawOffY+(cur.ypos+1)*mauerH);
            }
        }      
        for(int x=0; x<width; ++x){
            g.drawLine(drawOffX+borderN[x].xpos*mauerW, drawOffY+borderN[x].ypos*mauerH, drawOffX+(borderN[x].xpos+1)*mauerW, drawOffY+borderN[x].ypos*mauerH);
            g.drawLine(drawOffX+borderS[x].xpos*mauerW, drawOffY+borderS[x].ypos*mauerH, drawOffX+(borderS[x].xpos+1)*mauerW, drawOffY+borderS[x].ypos*mauerH);
        }
        for(int y=0; y<height; ++y){
            g.drawLine(drawOffX+borderE[y].xpos*mauerW, drawOffY+borderE[y].ypos*mauerH, drawOffX+borderE[y].xpos*mauerW, drawOffY+(borderE[y].ypos+1)*mauerH);
            g.drawLine(drawOffX+borderW[y].xpos*mauerW, drawOffY+borderW[y].ypos*mauerH, drawOffX+borderW[y].xpos*mauerW, drawOffY+(borderW[y].ypos+1)*mauerH);
        }
        // feste WÃ¤nde
        size = festeMauern.size();
        //g.setStroke(new BasicStroke(3));
        for(int i=0; i<size; ++i){
            cur = festeMauern.get(i);
            /*try{
                Thread.sleep(10); // warum auch immer aber sonst funktioniert's nicht.
            } catch (Exception e){
                e.printStackTrace();
            }*/
            if(cur.getOrientation()==Mauer.richtungen.horizontal){
                g.drawLine(drawOffX+cur.xpos*mauerW, drawOffY+cur.ypos*mauerH, drawOffX+(cur.xpos+1)*mauerW, drawOffY+cur.ypos*mauerH);
            } else {
                g.drawLine(drawOffX+cur.xpos*mauerW, drawOffY+cur.ypos*mauerH, drawOffX+cur.xpos*mauerW, drawOffY+(cur.ypos+1)*mauerH);
            }
        } 
        
        drawingPanel.getGraphics().drawImage(backBuffer, 0, 0, null);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btOK;
    private javax.swing.JButton btResetField;
    private javax.swing.JButton btRunGenerator;
    private javax.swing.JButton btStepGenerator;
    private javax.swing.JPanel drawingPanel;
    private javax.swing.JPanel generierenOptions;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel options;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfWidth;
    // End of variables declaration//GEN-END:variables
}
